---
include:
  - template: Jobs/Code-Intelligence.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/Secure-Binaries.gitlab-ci.yml
  - template: Workflows/MergeRequest-Pipelines.gitlab-ci.yml

stages:
  - variables
  - build
  - test

set_variables:
  stage: variables
  script:
    - ELIXIR_VERSION="$(awk -vFS='[ -]' '/^elixir/ { print $2 }' .tool-versions)"
    - ELIXIR_IMAGE="${CI_REGISTRY_IMAGE}/elixir:${ELIXIR_VERSION}-alpine-bash"
    - echo "ELIXIR_VERSION=${ELIXIR_VERSION}" >> variables.env
    - echo "ELIXIR_IMAGE=${ELIXIR_IMAGE}" >> variables.env
    - echo "DOCKER_IMAGE=${ELIXIR_IMAGE}" >> variables.env
  artifacts:
    reports:
      dotenv: variables.env

container_image:
  stage: build
  needs:
    - job: set_variables
      artifacts: true
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --build-arg ELIXIR_VERSION="${ELIXIR_VERSION}"
      --cache=true
      --context="${CI_PROJECT_DIR}"
      --dockerfile="${CI_PROJECT_DIR}/Dockerfile"
      --destination="${ELIXIR_IMAGE}"
  interruptible: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - .gitlab-ci.yml
        - .tool-versions
        - Dockerfile
      allow_failure: true

container_scanning:
  needs:
    - job: container_image
    - job: set_variables
      artifacts: true
  variables:
    DOCKER_IMAGE: ${DOCKER_IMAGE}

test:
  stage: test
  needs:
    - job: set_variables
      artifacts: true
    - job: container_image
      optional: true
  image: ${ELIXIR_IMAGE}
  cache:
    key:
      files:
        - .tool-versions
        - mix.lock
    paths:
      - .cache
  artifacts:
    reports:
      cobertura: coverage.xml
      junit: .cache/_build/test/lib/excercism_elixir/test-junit-report.xml
  coverage: '/^ *Line total: +(\d+\.\d+%) *$/'
  interruptible: true
  variables:
    MIX_ENV: test
  script:
    - source .gitlab/ci.sh
    - ci_section setup-hex mix local.hex --force --if-missing
    - ci_section setup-rebar mix local.rebar --force
    - ci_section setup-deps mix deps.get
    - ci_section lint-test-helpers ci_check_test_helpers
    - ci_section test mix test --cover
    - ci_section test-junit-for-gitlab .gitlab/junit-for-gitlab
    - ci_section lint-format mix format --check-formatted
    - ci_section lint-credo-high mix credo suggest --format=oneline --min-priority=high
    - ci_section lint-credo-info mix credo suggest --format=oneline --mute-exit-status
